#+OPTIONS: toc:nil ^:{}

First off: good job on the code!  It's nice and clear, and easy to
follow what it does and what it should do.

* Style

** Spaces

 First off, a small remark about the spacing.  I think it's interesting
 to write pattern matching without a space after the first character
 (~|~), because it looks like some ascii tree if you end the list with
 the "default" matcher (~|_~).  But I would not recommend it,
 especially while the spacing is not really consistent in the file.

 I saw you already reformatted the code on github, which is a good
 thing!  Consistent spacing makes it easier for other programmers to
 read the code and not get distracted.

** Alignment of pattern matching

   Although this partly depends on what kind of editor you are using,
   you could make some pattern matchings more clear by aligning them.
   For instance:

#+BEGIN_SRC fsharp
  let toggle = function
              | Switch.On -> Switch.Off
              | _ -> Switch.On
#+END_SRC

   could become

#+BEGIN_SRC fsharp
  let toggle = function
              | Switch.On -> Switch.Off
              | _         -> Switch.On
#+END_SRC

   And

#+BEGIN_SRC fsharp
  let translateCode (state: Switch) (lang: MessageLanguage) (action: Action) =
      match lang, action, state with
          | English, Toggle, _ -> toggle state
          | English, On, _ -> Switch.On
          | Nordic, Toggle, Brightness(x) -> Brightness (x+2)
          | Nordic, On, Brightness(x) -> Brightness (x+1)
          | Nordic, Off, Brightness(x) when x = 0 -> Brightness (0)
          | Nordic, Off, Brightness(x) -> Brightness (x-1)
          | _, _, _ -> Switch.Off
#+END_SRC

   reads easier as

#+BEGIN_SRC fsharp
  let translateCode (state: Switch) (lang: MessageLanguage) (action: Action) =
      match lang, action, state with
          | English, Toggle, _                        -> toggle state
          | English, On,     _                        -> Switch.On
          | Nordic,  Toggle, Brightness(x)            -> Brightness (x+2)
          | Nordic,  On,     Brightness(x)            -> Brightness (x+1)
          | Nordic,  Off,    Brightness(x) when x = 0 -> Brightness (0)
          | Nordic,  Off,    Brightness(x)            -> Brightness (x-1)
          | _,       _,      _                        -> Switch.Off
#+END_SRC

   Again, this may or may not be easy to do with your editor (or that
   of others who will maintain this code), so it's up to you how to
   align these.

*  Duplicate code

  You may have noticed, the code that solves each of the two problems
  is very similar.  Actually, the only places where the two blocks of
  code differ, are the name of the array to adjust, and the name of
  the language to use for translation.

  We can easily extract a function that can be used for both, if we
  give it those two changing elements as parameters:

#+BEGIN_SRC fsharp
  let followInstructions (language: MessageLanguage) (lights: Switch[,]) =
      "6.txt"
      |> filereadlines
      |> Seq.map (fun f -> getInstruction f language)
      |> Seq.iter(fun ins ->
          for i in ins.StartRow .. ins.EndRow do
              for j in ins.StartCol .. ins.EndCol do
                  lights.[i, j] <- translateCode lights.[i, j] ins.Language ins.Operation)
      lights

  let lights = Array2D.create 1000 1000 Switch.Off
  lights
  |> followInstructions English
  |> Seq.cast<Switch>
  |> Seq.filter(fun f -> f = Switch.On)
  |> Seq.length
  |> printfn "The number of lights that are turned on are %i"

  let nordiclights = Array2D.create 1000 1000 (Brightness 0)
  nordiclights
  |> followInstructions Nordic
  |> Seq.cast<Switch>
  |> Seq.map(fun f -> match f with
                          | Brightness(x) -> x
                          | _             -> 0)
  |> Seq.sum
  |> printfn "The Santa's real nordic decoded message and the total brightness is %i"
#+END_SRC

* Don't put the ~MessageLanguge~ in the ~Instruction~

  The ~Instruction~ type, and therefor the ~getInstruction~ function,
  both keep track of the ~MessageLanguage~.  The instruction does not
  contain that information, and only when we translate the instruction
  we need that information.  If you remove this field from the
  ~Instruction~ record, the code can be a bit easier to read:

#+BEGIN_SRC fsharp
  type Instruction = {
    Operation: Action
    StartRow: int
    StartCol: int
    EndRow: int
    EndCol: int
  }

  let getInstruction (line: string) =
      // ...
      match action with
          | Toggle -> {Operation = action; StartRow = elementat 1; StartCol = elementat 2;
                       EndRow = elementat 4 ; EndCol = elementat 5}
          | _      -> {Operation = action; StartRow = elementat 2; StartCol = elementat 3;
                       EndRow = elementat 5 ; EndCol = elementat 6}

  let followInstructions (language: MessageLanguage) (lights: Switch[,]) =
      // ...
      |> Seq.map (fun f -> getInstruction f)
      // ...
                      lights.[i, j] <- translateCode lights.[i, j] language ins.Operation)
#+END_SRC

   In fact, that line with ~Seq.map (fun f -> getInstruction f)~ can
   now benefit from \eta-reduction ("eta reduction"), which means that
   you don't need to write a placeholder variable name:

#+BEGIN_SRC fsharp
      |> Seq.map getInstruction
#+END_SRC

* Use pattern matching when decoding

  The ~getInstruction~ function can be written more transparent if you
  use pattern matching on the list of matches instead of ~if~
  statements.  This will also remove the need for numerous ~elementat~
  calls:

#+BEGIN_SRC fsharp
  let getInstruction (line: string) =
      let matches =
          Regex.Matches(line, "[\w\d_]+")
          |> Seq.cast<Match>
          |> Seq.filter (fun f -> f.Success) |> Seq.map(fun f-> f.Value)
          |> Seq.toList

      let operation, [startRow; startCol; _; endRow; endCol] =
          match matches with
              | "toggle" ::lights          -> Toggle, lights
              | "turn"   ::"on"   ::lights -> On, lights
              | "turn"   ::"off"  ::lights -> Off, lights
              | _                          -> failwith "Bad instruction format"

      { Operation = operation; StartRow = int startRow; StartCol = int startCol; EndRow = int endRow; EndCol = int endCol }
#+END_SRC

  I also added a ~failWith~ there, instead of defaulting to ~Off~ on
  invalid input.

* Parameter ordering and partial application

  In F#, as in other functional languages, it's customary to order
  parameters from "least likely to vary" to "most likely to vary".
  This way, you can benefit from partial application, making calls a
  bit shorter.  You can do this in =translateCode=, by moving =lang=
  to the front.  The partial application will then look as follows:

#+BEGIN_SRC fsharp
  let translateCode (lang: MessageLanguage) (state: Switch) (action: Action) =
      // ...

  let followInstructions (language: MessageLanguage) (lights: Switch[,]) =
      let translate = translateCode language
      "6.txt"
      |> filereadlines
      |> Seq.map getInstruction
      |> Seq.iter(fun ins ->
          for i in ins.StartRow .. ins.EndRow do
              for j in ins.StartCol .. ins.EndCol do
                  lights.[i, j] <- translate lights.[i, j] ins.Operation)
      lights
#+END_SRC

  Now =followInstructions= creates a partial applied function
  =translate=, and no longer needs to pass the =language= every time
  when calling it.
